schwellentest("abababaababab")
schwellentest("abbaabbaabbaabbaabbaababb")
schwellentest = function(lex) {
translator = create_translator(c(korpus))
base = length(translator)
probs = rep(0, times = base)
chars = strsplit(lex, "")[[1]]
for(n in 1:length(chars)) {
probs[translator[chars[n]]+1] = probs[translator[chars[n]]+1] + 1
}
for(n in 1:length(probs)) {
probs[n] = probs[n]/(base-1)
}
p_0 = 1
for(char in chars) {
p_0 = p_0 * probs[translator[char]+1]
}
markov_addone_init(c(lex))
p_1 = markov_score(lex)
return(p_0/p_1)
}
schwellentest("abababaababab")
schwellentest("abbaabbaabbaabbaabbaababb")
markov_addone_init(c("abababaababab"))
markov_score("abababaababab")
pow(7/13, 7)*pow(6/13, 6)
((7/13)^7)*((6/13)^6)
schwellentest("abba")
(2/5)^4
0.5*(2/5)^4
(1/16)/(0.5*(2/5)^4)
schwellentest = function(lex) {
translator = create_translator(c(korpus))
base = length(translator)
probs = rep(0, times = base)
chars = strsplit(lex, "")[[1]]
for(n in 1:length(chars)) {
probs[translator[chars[n]]+1] = probs[translator[chars[n]]+1] + 1
}
for(n in 1:length(probs)) {
probs[n] = probs[n]/(base-1)
}
p_0 = 1
for(char in chars) {
p_0 = p_0 * probs[translator[char]+1]
}
markov_addone_init(c(lex))
p_1 = markov_score(lex)
return(p_1)
return(p_0/p_1)
}
schwellentest("abba")
markov_probs
schwellentest("abba")
markov_score = function(sentence) {
translator = create_translator(c(korpus))
base = length(translator)
chars = c('s', strsplit(sentence, "")[[1]], 's')
prob = 1
for(n in 2:length(chars)) {
key = translator[chars[n-1]]*base + translator[chars[n]]
print(markov_probs[key + 1])
prob = prob * markov_probs[key + 1]
}
return(prob)
}
schwellentest("abba")
markov_probs
markov_score = function(sentence) {
translator = create_translator(c(korpus))
base = length(translator)
chars = c('s', strsplit(sentence, "")[[1]], 's')
prob = 1
for(n in 2:length(chars)) {
print(translator[chars[n-1]])
key = translator[chars[n-1]]*base + translator[chars[n]]
print(markov_probs[key + 1])
prob = prob * markov_probs[key + 1]
}
return(prob)
}
markov_score = function(sentence) {
translator = create_translator(c(korpus))
base = length(translator)
chars = c('s', strsplit(sentence, "")[[1]], 's')
prob = 1
for(n in 2:length(chars)) {
print(translator[chars[n-1]])
key = translator[chars[n-1]]*base + translator[chars[n]]
print(markov_probs[key + 1])
prob = prob * markov_probs[key + 1]
}
return(prob)
}
schwellentest("abba")
markov_score = function(sentence) {
translator = create_translator(c(korpus))
base = length(translator)
chars = c('s', strsplit(sentence, "")[[1]], 's')
prob = 1
for(n in 2:length(chars)) {
print(translator[chars[n]])
key = translator[chars[n-1]]*base + translator[chars[n]]
print(markov_probs[key + 1])
prob = prob * markov_probs[key + 1]
}
return(prob)
}
schwellentest("abba")
markov_score = function(sentence) {
translator = create_translator(c(korpus))
base = length(translator)
chars = c('s', strsplit(sentence, "")[[1]], 's')
prob = 1
for(n in 2:length(chars)) {
key = translator[chars[n-1]]*base + translator[chars[n]]
print(key + 1)
prob = prob * markov_probs[key + 1]
}
return(prob)
}
schwellentest("abba")
markov_score = function(sentence) {
translator = create_translator(c(korpus))
base = length(translator)
chars = c('s', strsplit(sentence, "")[[1]], 's')
prob = 1
for(n in 2:length(chars)) {
key = translator[chars[n-1]]*base + translator[chars[n]]
print(translator[chars[n]])
prob = prob * markov_probs[key + 1]
}
return(prob)
}
schwellentest("abba")
markov_score = function(sentence) {
translator = create_translator(c(korpus))
base = length(translator)
chars = c('s', strsplit(sentence, "")[[1]], 's')
prob = 1
for(n in 2:length(chars)) {
key = translator[chars[n-1]]*base + translator[chars[n]]
print(translator[chars[n-1]])
prob = prob * markov_probs[key + 1]
}
return(prob)
}
schwellentest("abba")
markov_score = function(sentence) {
translator = create_translator(c(korpus))
base = length(translator)
chars = c('s', strsplit(sentence, "")[[1]], 's')
prob = 1
for(n in 2:length(chars)) {
key = translator[chars[n-1]]*base + translator[chars[n]]
print(base)
prob = prob * markov_probs[key + 1]
}
return(prob)
}
schwellentest("abba")
markov_score = function(sentence) {
translator = create_translator(c(korpus))
base = length(translator)
chars = c('s', strsplit(sentence, "")[[1]], 's')
prob = 1
for(n in 2:length(chars)) {
key = translator[chars[n-1]]*base + translator[chars[n]]
print(translator)
prob = prob * markov_probs[key + 1]
}
return(prob)
}
schwellentest("abba")
#2. Modifizieren Sie die Sch¨atz-Funktionen so, dass wir add-one smoothing haben. Testen
#Sie die beiden Varianten (maximum likelihoodL,add-one) auf folgenden Daten:
#  • Korpus (zum Sch¨atzen): {aaba,abbaa,abbca,abcca,baabc}
#• Worte (zum scoren): aacca,abcc,aabaabc
markov_addone_init = function(korpus) {
translator = create_translator(korpus)
base = length(translator)
ret = rep(1, times = base*base)
ns = rep(base, times = base)
for(s in korpus) {
chars = c("s", strsplit(s, "")[[1]], "s")
for(n in 2:length(chars)) {
key = translator[chars[n-1]]*base + translator[chars[n]]
first = translator[chars[n-1]]
ret[key+1] = ret[key+1] + 1
ns[first+1] = ns[first+1] + 1
}
}
for(n in 0:(base-1)) {
for(k in 0:(base-1)) {
ret[n*base+k+1] = ret[n*base+k+1]/ns[n+1]
}
}
markov_probs <<- ret
}
schwellentest("abba")
markov_score = function(sentence) {
translator = create_translator(c(sentence))
base = length(translator)
chars = c('s', strsplit(sentence, "")[[1]], 's')
prob = 1
for(n in 2:length(chars)) {
key = translator[chars[n-1]]*base + translator[chars[n]]
print(translator)
prob = prob * markov_probs[key + 1]
}
return(prob)
}
schwellentest("abba")
schwellentest = function(lex) {
translator = create_translator(c(lex))
base = length(translator)
probs = rep(0, times = base)
chars = strsplit(lex, "")[[1]]
for(n in 1:length(chars)) {
probs[translator[chars[n]]+1] = probs[translator[chars[n]]+1] + 1
}
for(n in 1:length(probs)) {
probs[n] = probs[n]/(base-1)
}
p_0 = 1
for(char in chars) {
p_0 = p_0 * probs[translator[char]+1]
}
markov_addone_init(c(lex))
p_1 = markov_score(lex)
return(p_1)
return(p_0/p_1)
}
schwellentest("abba")
schwellentest = function(lex) {
translator = create_translator(c(lex))
base = length(translator)
probs = rep(0, times = base)
chars = strsplit(lex, "")[[1]]
for(n in 1:length(chars)) {
probs[translator[chars[n]]+1] = probs[translator[chars[n]]+1] + 1
}
for(n in 1:length(probs)) {
probs[n] = probs[n]/(base-1)
}
p_0 = 1
for(char in chars) {
p_0 = p_0 * probs[translator[char]+1]
}
markov_addone_init(c(lex))
p_1 = markov_score(lex)
return(p_0/p_1)
}
schwellentest("abba")
(1/16)/(0.5*(2/5)^4)
schwellentest = function(lex) {
translator = create_translator(c(lex))
base = length(translator)
probs = rep(0, times = base)
chars = strsplit(lex, "")[[1]]
for(n in 1:length(chars)) {
probs[translator[chars[n]]+1] = probs[translator[chars[n]]+1] + 1
}
for(n in 1:length(probs)) {
probs[n] = probs[n]/(base-1)
}
p_0 = 1
for(char in chars) {
p_0 = p_0 * probs[translator[char]+1]
}
markov_addone_init(c(lex))
p_1 = markov_score(lex)
return(p_0)
return(p_0/p_1)
}
schwellentest("abba")
schwellentest = function(lex) {
translator = create_translator(c(lex))
base = length(translator)
probs = rep(0, times = base)
chars = strsplit(lex, "")[[1]]
for(n in 1:length(chars)) {
probs[translator[chars[n]]+1] = probs[translator[chars[n]]+1] + 1
}
for(n in 1:length(probs)) {
probs[n] = probs[n]/(base-1)
}
p_0 = 1
for(char in chars) {
p_0 = p_0 * probs[translator[char]+1]
print(translator[char]+1)
}
markov_addone_init(c(lex))
p_1 = markov_score(lex)
return(p_0)
return(p_0/p_1)
}
schwellentest("abba")
markov_score = function(sentence) {
translator = create_translator(c(sentence))
base = length(translator)
chars = c('s', strsplit(sentence, "")[[1]], 's')
prob = 1
for(n in 2:length(chars)) {
key = translator[chars[n-1]]*base + translator[chars[n]]
prob = prob * markov_probs[key + 1]
}
return(prob)
}
schwellentest("abba")
schwellentest = function(lex) {
translator = create_translator(c(lex))
base = length(translator)
probs = rep(0, times = base)
chars = strsplit(lex, "")[[1]]
for(n in 1:length(chars)) {
probs[translator[chars[n]]+1] = probs[translator[chars[n]]+1] + 1
}
for(n in 1:length(probs)) {
probs[n] = probs[n]/(base-1)
}
p_0 = 1
for(char in chars) {
p_0 = p_0 * probs[translator[char]+1]
print(probs[translator[char]+1])
}
markov_addone_init(c(lex))
p_1 = markov_score(lex)
return(p_0)
return(p_0/p_1)
}
schwellentest("abba")
schwellentest = function(lex) {
translator = create_translator(c(lex))
base = length(translator)
probs = rep(0, times = base)
chars = strsplit(lex, "")[[1]]
for(n in 1:length(chars)) {
probs[translator[chars[n]]+1] = probs[translator[chars[n]]+1] + 1
}
print(probs)
for(n in 1:length(probs)) {
probs[n] = probs[n]/(base-1)
}
p_0 = 1
for(char in chars) {
p_0 = p_0 * probs[translator[char]+1]
}
markov_addone_init(c(lex))
p_1 = markov_score(lex)
return(p_0)
return(p_0/p_1)
}
schwellentest("abba")
schwellentest = function(lex) {
translator = create_translator(c(lex))
base = length(translator)
probs = rep(0, times = base-1)
chars = strsplit(lex, "")[[1]]
for(n in 1:length(chars)) {
probs[translator[chars[n]]+1] = probs[translator[chars[n]]+1] + 1
}
print(probs)
for(n in 1:length(probs)) {
probs[n] = probs[n]/(base-1)
}
p_0 = 1
for(char in chars) {
p_0 = p_0 * probs[translator[char]+1]
}
markov_addone_init(c(lex))
p_1 = markov_score(lex)
return(p_0)
return(p_0/p_1)
}
schwellentest("abba")
schwellentest = function(lex) {
translator = create_translator(c(lex))
base = length(translator)
probs = rep(0, times = base-1)
chars = strsplit(lex, "")[[1]]
for(n in 1:length(chars)) {
probs[translator[chars[n]]+1] = probs[translator[chars[n]]+1] + 1
}
print(probs)
for(n in 1:length(probs)) {
probs[n] = probs[n]/length(lex)
}
p_0 = 1
for(char in chars) {
p_0 = p_0 * probs[translator[char]+1]
}
markov_addone_init(c(lex))
p_1 = markov_score(lex)
return(p_0)
return(p_0/p_1)
}
schwellentest("abba")
(1/16)/(0.5*(2/5)^4)
schwellentest = function(lex) {
translator = create_translator(c(lex))
base = length(translator)
probs = rep(0, times = base-1)
chars = strsplit(lex, "")[[1]]
for(n in 1:length(chars)) {
probs[translator[chars[n]]+1] = probs[translator[chars[n]]+1] + 1
}
for(n in 1:length(probs)) {
probs[n] = probs[n]/length(lex)
}
print(probs)
p_0 = 1
for(char in chars) {
p_0 = p_0 * probs[translator[char]+1]
}
markov_addone_init(c(lex))
p_1 = markov_score(lex)
return(p_0)
return(p_0/p_1)
}
(1/16)/(0.5*(2/5)^4)
schwellentest("abba")
schwellentest = function(lex) {
translator = create_translator(c(lex))
base = length(translator)
probs = rep(0, times = base-1)
chars = strsplit(lex, "")[[1]]
for(n in 1:length(chars)) {
probs[translator[chars[n]]+1] = probs[translator[chars[n]]+1] + 1
}
for(n in 1:length(probs)) {
probs[n] = probs[n]/length(chars)
}
print(probs)
p_0 = 1
for(char in chars) {
p_0 = p_0 * probs[translator[char]+1]
}
markov_addone_init(c(lex))
p_1 = markov_score(lex)
return(p_0)
return(p_0/p_1)
}
schwellentest("abba")
1/16
schwellentest = function(lex) {
translator = create_translator(c(lex))
base = length(translator)
probs = rep(0, times = base-1)
chars = strsplit(lex, "")[[1]]
for(n in 1:length(chars)) {
probs[translator[chars[n]]+1] = probs[translator[chars[n]]+1] + 1
}
for(n in 1:length(probs)) {
probs[n] = probs[n]/length(chars)
}
print(probs)
p_0 = 1
for(char in chars) {
p_0 = p_0 * probs[translator[char]+1]
}
markov_addone_init(c(lex))
p_1 = markov_score(lex)
return(p_0/p_1)
}
schwellentest("abba")
(1/16)/(0.5*(2/5)^4)
schwellentest = function(lex) {
translator = create_translator(c(lex))
base = length(translator)
probs = rep(0, times = base-1)
chars = strsplit(lex, "")[[1]]
for(n in 1:length(chars)) {
probs[translator[chars[n]]+1] = probs[translator[chars[n]]+1] + 1
}
for(n in 1:length(probs)) {
probs[n] = probs[n]/length(chars)
}
print(probs)
p_0 = 1
for(char in chars) {
p_0 = p_0 * probs[translator[char]+1]
}
markov_addone_init(c(lex))
p_1 = markov_score(lex)
return(p_0/p_1)
}
schwellentest("abababaababab")
schwellentest("abbaabbaabbaabbaabbaababb")
schwellentest("abba")
schwellentest = function(lex) {
translator = create_translator(c(lex))
base = length(translator)
probs = rep(0, times = base-1)
chars = strsplit(lex, "")[[1]]
for(n in 1:length(chars)) {
probs[translator[chars[n]]+1] = probs[translator[chars[n]]+1] + 1
}
for(n in 1:length(probs)) {
probs[n] = probs[n]/length(chars)
}
p_0 = 1
for(char in chars) {
p_0 = p_0 * probs[translator[char]+1]
}
markov_addone_init(c(lex))
p_1 = markov_score(lex)
return(p_0/p_1)
}
schwellentest("abba")
schwellentest("abababaababab")
schwellentest("abbaabbaabbaabbaabbaababb")
